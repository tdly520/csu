<!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN">
<html>
<head>
<meta name="GENERATOR" content="&quot;MSHTML 5.00.0518.7&quot;">
<object id=objSQLNSContext width=0 height=0 classid="clsid:00100106-1816-11d0-8EF5-00AA0062C58F" style="display:none"></object>

<link rel="stylesheet" link="text/css" href="sqlHTML.css">
</head>

<body TOPMARGIN="0" LEFTMARGIN="0" language="jscript" onload="main()">


<br>
<div width="95%" align="center">

<table align="left">
    <tr>
        <td width="118">
            <table cellspacing="0" cellpadding="0" border="0" height="19"   onmouseover="this.style.cursor='hand'">
  			   	<tr>
    		   		<td tdWidth="9" onclick="ToggleView()"><img id="go_1" src="go1.gif" border="0" ></td>
    		   		<td background="GoMiddle.gif" id="goMiddle" td align="center" onclick="ToggleView()" width="100" nowrap><font class="labelFont" valign="center" id="tdToggleView"></font></td>
    		   		<td td width="9"><img id="go_2" src="go2.gif" border="0" onclick="ToggleView()"></td>
    		   	</tr>
    		</table>		        
        </td>
        <td width="118">
            <table cellspacing="0" cellpadding="0" border="0" height="19" onmouseover="this.style.cursor='hand'">
  			   	<tr>
    		   		<td tdWidth="9"><img id="go_1" src="go1.gif" border="0" onclick="ShowFieldList()"></td>
    		   		<td background="GoMiddle.gif" id="goMiddle" td width="100" align="center" onclick="ShowFieldList()" nowrap><font class="labelFont" valign="center" id="tdShowFieldList"><!--GO--></font></td>
    		   		<td td width="9"><img id="go_2" src="go2.gif" border="0" onclick="ShowFieldList()"></td>
    		   	</tr>
    		</table>		                
        </td>
        <td width="118">
            <table cellspacing="0" cellpadding="0" border="0" height="19" onmouseover="this.style.cursor='hand'">
  			   	<tr>
    		   		<td tdWidth="9"><img id="go_1" src="go1.gif" border="0" onclick="RefreshData()"></td>
    		   		<td background="GoMiddle.gif" id="goMiddle" td width="100" align="center" onclick="RefreshData()" nowrap><font class="labelFont" valign="center" id="tdRefreshData"><!--GO--></font></td>
    		   		<td td width="9"><img id="go_2" src="go2.gif" border="0" onclick="RefreshData()"></td>
    		   	</tr>
    		</table>		                
        </td>
        <td width="118">
            <table cellspacing="0" cellpadding="0" border="0" height="19" onmouseover="this.style.cursor='hand'">
  			   	<tr>
    		   		<td tdWidth="9"><img id="go_1" src="go1.gif" border="0" onclick="ResetView()"></td>
    		   		<td background="GoMiddle.gif" id="goMiddle" td width="100" align="center" onclick="ResetView()" nowrap><font class="labelFont" valign="center" id="tdResetView"><!--GO--></font></td>
    		   		<td td width="9"><img id="go_2" src="go2.gif" border="0" onclick="ResetView()"></td>
    		   	</tr>
    		</table>		                
        </td>
        
        <td width="118" id="btnExport" style="display:none">
            <table cellspacing="0" cellpadding="0" border="0" height="19" onmouseover="this.style.cursor='hand'">
  			   	<tr>
    		   		<td tdWidth="9"><img id="go_1" src="go1.gif" border="0" onclick="ExportData()"></td>
    		   		<td background="GoMiddle.gif" id="goMiddle" td width="100" align="center" onclick="ExportData()" nowrap><font class="labelFont" valign="center" id="tdExport">GO</font></td>
    		   		<td td width="9"><img id="go_2" src="go2.gif" border="0" onclick="ExportData()"></td>
    		   	</tr>
    		</table>		                
        </td>
        
        <td align="right" width="100%">
            <input name="chkExpandFields" type="checkbox" value="Expand all" onclick="ExpandFields()" title="Expand all dimension fields"> 
        </td>
        <td width="10%" align="right"  nowrap><font class="labelFont" valign="center" id="tdExpandFields"></font></td>
        
    </tr>
    
</table>
<br>
</div>

<br>


<object classid="CLSID:0002E520-0000-0000-C000-000000000046" codeBase height="384" id="objPTable" style="height: 384px; left: 0px; width: 556px; display: inline" width="100%" VIEWASTEXT>
				<param NAME="XMLData" VALUE="&lt;xml xmlns:x=&quot;urn:schemas-microsoft-com:office:excel&quot;&gt;&lt;x:PivotTable&gt;&lt;x:OWCVersion&gt;9.0.0.2618&lt;/x:OWCVersion&gt;&lt;x:CacheDetails/&gt;&lt;/x:PivotTable&gt;&lt;/xml&gt;">
</object>

<br>
<br>
<br>

<object classid="clsid:0002E500-0000-0000-C000-000000000046" codebase id="objCSpace" style="display: none; height: 85%; width: 100%">
		<param NAME="XMLData" VALUE="&lt;xml xmlns:x=&quot;urn:schemas-microsoft-com:office:excel&quot;&gt;&lt;x:WebChart&gt;&lt;x:OWCVersion&gt;9.0.0.2515&lt;/x:OWCVersion&gt;&lt;x:Width&gt;20109&lt;/x:Width&gt;&lt;x:Height&gt;13467&lt;/x:Height&gt;&lt;/x:WebChart&gt;&lt;/xml&gt;">
		<param NAME="ScreenUpdating" VALUE="-1">
</object>

<script language="jscript" for="document" event="onselectstart()">

    window.event.returnValue = false;

</script>


</body>


<script language="javascript">
<!--
//=====================================================================
// global variables
//=====================================================================
		//Commandline parameters:
		var m_strTraceName;					//query string param "name"
		var m_strTraceServerName;		//query string param "server"
		var m_strTrustedConnection;	//query string param "trusted"
		var m_strTraceServerUID;		//query string param "uid"
		var m_strTraceServerPWD;		//query string param "pwd"
		var m_strTraceTableName;		//query string param "table"
		var m_strCubeFileName;			//query string param "cube"

		//View configuration strings:
		var m_numCurrentView;									//used to identify the current view for chart selection and resetting view
		var m_strViewFontColor;								//used to reset the view tab font color
		var m_strPeriodViewString;						//used to set the pivot table title
		var m_strApplicationViewString;				//used to set the pivot table title
		var m_strUserViewString;							//used to set the pivot table title
		var m_strDisplayPTableString;					//used to toggle the display link text
		var m_strDisplayPTableTitleString;		//used to toggle the display link tooltip
		var m_strDisplayChartString;					//used to toggle the display link text
		var m_strDisplayChartTitleString;			//used to toggle the display link tooltip
		
		//Build/rebuild cube prompts:
		var m_strBuildCubePrompt;
		var m_strRefreshCubePrompt;
		
		//Pivot table/chart strings:
		var m_strPeriodString;
		var m_strAllPeriodsString;
		var m_strOperatorTypeString;
		var m_strAllOperatorTypesString;
		var m_strApplicationString;
		var m_strAllApplicationsString;
		var m_strUserString;
		var m_strAllUsersString;
		var m_strCountString;
		var m_strMaxDurationString;
		var m_strSumDurationString;
		var m_strMaxReadsString;
		var m_strSumReadsString;
		var m_strAvgDurationString;
		var m_strAvgReadsString;
		
		//Error message strings:
		var m_strErrorGettingParamString;
		var m_strErrorOpeningConnectionString;
		var m_strErrorOpeningCubeString;
		var m_strErrorLoadingPTableString;
		var m_strErrorConfiguringPTableString;
		var m_strErrorBindingChartString;
		var m_strErrorExportingDataString;
		var m_strErrorRefreshingDataString;
		var errorFlag
		var m_pa;

//=====================================================================
// main
//---------------------------------------------------------------------
// Purpose:	Sets up the initial environment
// Params:	None
// Returns:	Nothing
//=====================================================================
function main()
{
		//Load the static strings.
		
		m_strPeriodViewString						= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5504);
		m_strApplicationViewString			        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5507);
		m_strUserViewString							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5510);
		m_strDisplayChartString					    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5511);
		m_strDisplayChartTitleString		        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5512);
		m_strDisplayPTableString				    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5513);
		m_strDisplayPTableTitleString		        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5514);
		tdShowFieldList.innerText				    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5515);
		tdShowFieldList.title						= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5516);
		tdRefreshData.innerText					    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5517);
		tdRefreshData.title							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5518);
		tdResetView.innerText						= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5519);
		tdResetView.title							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5520);
		tdExport.innerText							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5521);
		tdExport.title								= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5522);
		tdExpandFields.innerText				    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5523);
		chkExpandFields.title						= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5524);
		m_strPeriodString							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5525);
		m_strAllPeriodsString						= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5526);
		m_strOperatorTypeString					    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5527);
		m_strAllOperatorTypesString			        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5528);
		m_strApplicationString					    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5529);
		m_strAllApplicationsString			        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5530);
		m_strUserString								= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5531);
		m_strAllUsersString							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5532);
		m_strCountString							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5533);
		m_strMaxDurationString					    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5534);
		m_strMaxReadsString							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5535);
		m_strAvgDurationString					    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5536);
		m_strAvgReadsString							= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5537);
		m_strErrorGettingParamString		        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5538);
		m_strErrorOpeningConnectionString	        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5539);
		m_strErrorOpeningCubeString			        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5540);
		m_strErrorLoadingPTableString		        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5541);
		m_strErrorConfiguringPTableString	        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5542);
		m_strErrorBindingChartString		        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5543);
		m_strErrorExportingDataString		        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5544);
		m_strErrorRefreshingDataString          	= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5545);
		m_strBuildCubePrompt						= objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5546);
		m_strRefreshCubePrompt					    = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5547);
		m_pa                                        = objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5548);
	
		//Update the text.
		tdToggleView.innerText  = m_strDisplayChartString;
		tdToggleView.title      = m_strDisplayChartTitleString;

	    errorFlag = false;

		//Load the parameters.
		aux = GetParameter( "name" );	
		m_strTraceName = aux;	
		while(aux.search("%20") != -1)
		{
		    m_strTraceName = aux.replace("%20", " "); 
		    aux            = m_strTraceName;  
		}

		if( m_strTraceName == "" )
		{
				alert( m_strErrorGettingParamString + "name\n\nhref=" + document.location.href );
				return;
		}
		m_strTraceServerName = GetParameter( "server" );
		if( m_strTraceServerName == "" )
		{
				alert( m_strErrorGettingParamString + "server\n\nhref=" + document.location.href );
				return;
		}
		m_strTrustedConnection = GetParameter( "trusted" );
		if( m_strTraceServerUID == "" )
		{
				alert( m_strErrorGettingParamString + "trusted\n\nhref=" + document.location.href );
				return;
		}
		m_strTraceServerUID = GetParameter( "uid" );
		if( m_strTrustedConnection == "no" && m_strTraceServerUID == "" )
		{
				alert( m_strErrorGettingParamString + "uid\n\nhref=" + document.location.href );
				return;
		}
		m_strTraceServerPWD = GetParameter( "pwd" ); //pwd can be zero length
		m_strTraceTableName = GetParameter( "table" );
		if( m_strTraceTableName == "" )
		{
				alert( m_strErrorGettingParamString + "table\n\nhref=" + document.location.href );
				return;
		}
		aux = GetParameter( "cube" );	
		m_strCubeFileName = aux;	
		while(aux.search("%20") != -1)
		{
		    m_strCubeFileName = aux.replace("%20", " "); 
		    aux               = m_strCubeFileName;  
		}
		if( m_strCubeFileName == "" )
		{
				alert( m_strErrorGettingParamString + "cube\n\nhref=" + document.location.href );
				return;
		}
        
		//Set the document title
		document.title = m_strTraceName + objSQLNSContext.ProvideLocalizedString("sqlmmc.rll", 5501);
		
		
		//Prompt to build the cube if it doesn't exist or is out of date
		
		var objCubeFile = null
		
		try
		{
		    objCubeFile = new ActiveXObject("Scripting.FileSystemObject");
        }
        catch(e)
        {
            errorFlag = true;
        }
        
        if(errorFlag)
        {
            return;
        }
        		    
		if( !objCubeFile.FileExists(m_strCubeFileName) )
		{
				if( confirm( m_strBuildCubePrompt ) )
				{
						ProcessCube();
				}
				else //don't create cube - nothing to do.
				{
						close();
						return;
				}
		}
		else //prompt to refresh cube if stale, display refresh button.
		{
				//Get the cube mod date.
				var objFileProps = new Object();
				objFileProps = objCubeFile.getFile( m_strCubeFileName );
				var strCubeModDate = objFileProps.DateLastModified;

				//Get the max starttime.
				try
				{
						var strSQL = "select max(starttime) from " + m_strTraceTableName;
						var objSqlCn = new ActiveXObject("ADODB.Connection");
						var strSqlConString = new String( "DRIVER={SQL Server};SERVER=" + m_strTraceServerName );
						if( m_strTrustedConnection == "no" )
						{
								strSqlConString +=	";UID=" + m_strTraceServerUID +
																		";PWD=" + m_strTraceServerPWD + ";\n";
						}
						else
						{
								strSqlConString += ";TRUSTED_CONNECTION=yes;\n";
						}
						objSqlCn.Open( strSqlConString );
						var objRs = new ActiveXObject("ADODB.Recordset");
						objRs.Open( strSQL, objSqlCn );
						var strMaxStarttime = objRs.Fields(0).Value;
						objRs.Close();
						objSqlCn.Close();
			  
						//Compare max starttime and cube mod date.
						if( strMaxStarttime > strCubeModDate )
						{
							if( confirm(m_strRefreshCubePrompt) )
							{
                            	var strPTableConString =	"Provider=MSOLAP;Data Source=";
		                                
		                        //Add cube file specification.
		                        strPTableConString += m_strCubeFileName;
							    objPTable.ConnectionString = strPTableConString;
										
								RefreshData();
                            }										
						}
						    
						//If the table exists and has data, display the refresh button.
						if( strMaxStarttime > 0 )
						{
								tdRefreshData.style.display = "inline";
						}
				}
				catch( e )
				{
						//Don't return an error! All settings are defaulted properly
						//if the table isn't available for whatever reason.
						//alert( e.description ); //debug
				}
		}
	
		LoadPivotTable();
		CreateChart();
	
	/*
		//Check to see that Excel exists - set Export button display.
		try
		{
				var objExcel = new ActiveXObject("Excel.Application");
				if( objExcel.version >= 9 )
				{
				    btnExport.style.display = ""
				}
		}
		catch( e )
		{
				//Don't display an error if Excel is NOT installed. The export
				//button is not displayed by default.
		}
*/		
		
} // end window_onload()


//=====================================================================
// GetParameter
//---------------------------------------------------------------------
// Purpose:	Parses the command string and returns the requested param
// Params:	parameter name
// Returns:	parameter value
//=====================================================================
function GetParameter( strParam )
{
		var strHref = new String(); 
		var strSeparator = "&";
		var strFind = new String();
		var intStart;
		var intLast;

		//Parse out the param value;
		strHref = parent.window.document.location.href;
		strFind = "&" + strParam;
		intStart = strHref.indexOf( strFind, 0 );
		if( intStart < 0 )
		{
				return "";
		}
		else
		{
				intStart = intStart + strFind.length + 1;
				intLast = strHref.indexOf( strSeparator, intStart );
				if (intLast < 0 )
						intLast = strHref.length;
				return strHref.substring( intStart, intLast );
		}
}


//=====================================================================
// ProcessCube
//---------------------------------------------------------------------
// Purpose:	Creates the cube
// Params:	none
// Returns:	Nothing
//=====================================================================
function ProcessCube()
{
		//Create the connection object.
		try
		{
				var objCube = new ActiveXObject( "ADODB.Connection" );
		}
		catch( e )
		{
				alert( m_strErrorOpeningConnectionString + e.description );
				return;
		}

		//Parse out the databasee and table names.
		var strDatabaseName;
		var strTableName;
		strDatabaseName = m_strTraceTableName.substring( 1, m_strTraceTableName.indexOf(".",0)-1 );
		strTableName = m_strTraceTableName.substring( m_strTraceTableName.indexOf(".",0)+1, m_strTraceTableName.length );
		
		//Create connect string - provider info.
		var strCubeConString =	"PROVIDER=MSOLAP" +
														";LOCATION=" + m_strCubeFileName + ";\n" +
														"SOURCE_DSN=\"DRIVER={SQL Server};SERVER=" + m_strTraceServerName +
														";DATABASE=" + strDatabaseName;
		if( m_strTrustedConnection == "no" )
		{
				strCubeConString +=	";UID=" + m_strTraceServerUID +
														";PWD=" + m_strTraceServerPWD + "\";\n";
		}
		else
		{
				strCubeConString += ";TRUSTED_CONNECTION=yes\";\n";
		}
											
		//Append connect string - create cube parameter.
		strCubeConString += "CREATECUBE=CREATE CUBE [" + m_pa + "] ( \n" +
												"  DIMENSION [" + m_strPeriodString + "], \n" +
												"    LEVEL [" + m_strAllPeriodsString + "] TYPE ALL, \n" +
												"    LEVEL [" + m_strPeriodString + "], \n" +
												"  DIMENSION [" + m_strOperatorTypeString + "], \n" +
												"    LEVEL [" + m_strAllOperatorTypesString + "] TYPE ALL, \n" +
												"    LEVEL [" + m_strOperatorTypeString + "], \n" +
												"  DIMENSION [" + m_strApplicationString + "], \n" +
												"    LEVEL [" + m_strAllApplicationsString + "] TYPE ALL, \n" +
												"    LEVEL [" + m_strApplicationString + "], \n" +
												"  DIMENSION [" + m_strUserString + "], \n" +
												"    LEVEL [" + m_strAllUsersString + "] TYPE ALL, \n" +
												"    LEVEL [" + m_strUserString + "], \n" +
												"  MEASURE [" + m_strCountString + "] Function Count Format '#', \n" +
												"  MEASURE [" + m_strMaxDurationString + "] Function Max Format '#', \n" +
												"  MEASURE [" + m_strMaxReadsString + "] Function Max Format '#', \n" +
												"  COMMAND (CREATE MEMBER [" + m_pa + "].[Measures].[" + m_strAvgDurationString + "] AS \n" +
												"    '[Measures].[" + m_strSumDurationString + "]/[Measures].[" + m_strCountString + "]'), \n" +
												"  COMMAND (CREATE MEMBER [" + m_pa + "].[Measures].[" + m_strAvgReadsString + "] AS \n" +
												"    '[Measures].[" + m_strSumReadsString + "]/[Measures].[" + m_strCountString + "]') );\n";
												//"  MEASURE [" + m_strMaxReadsString + "] Function Sum Format '#' );\n";
											
		//Append connect string - insert into parameter.
		strCubeConString += "INSERTINTO=INSERT INTO " + m_pa + " ( \n" +
												"  [" + m_strPeriodString + "], \n" +
												"  [" + m_strOperatorTypeString + "], \n" +
												"  [" + m_strApplicationString + "], \n" +
												"  [" + m_strUserString + "], \n" +
												"  [" + m_strCountString + "], \n" +
												"  [" + m_strMaxDurationString + "], \n" +
												"  [" + m_strMaxReadsString + "] )\n";
											
		//Append connect string - select from parameter.
		strCubeConString += "OPTIONS PASSTHROUGH SELECT \n" +
												"  CONVERT( varchar, \n" +
												"    CONVERT(varchar, datepart(yyyy, StartTime)) + '/' + \n" +
												"    CONVERT(varchar, datepart(mm, StartTime)) + '/' + \n" +
												"    CONVERT(varchar, datepart(dd, StartTime)) + ' ' + \n" +
												"    CONVERT(varchar, datepart(hh, StartTime)) + ':00' \n" +
												"    ) AS [Period], \n" +
												"  [Operator Type] = CASE CONVERT(binary, BinaryData) \n" +
												"    WHEN 0xc3 THEN 'Insert' \n" +
												"    WHEN 0xc1 THEN 'Select' \n" +
												"    WHEN 0xc5 THEN 'Update' \n" +
												"    WHEN 0xc4 THEN 'Delete' \n" +
												"    ELSE 'Other' END, \n" +
												"  [ApplicationName] AS [Application], \n" +
												"  [SQLUserName] AS [User], \n" +
												"  [EventClass], \n" +
												"  [Duration], \n" +
												"  [Reads] \n" +
												"FROM ";
										
		//Append connect string - from table specification.
		strCubeConString += strTableName;
	
		//Create the cube and close the connection.
		try
		{
				objCube.open( strCubeConString );
				objCube.Close();
				
				//The table exists so display the refresh button.
				tdRefreshData.style.display = "inline";
		}
		catch( e )
		{
				alert( m_strErrorOpeningCubeString + e.description );
				errorFlag = true;
		}
} // end ProcessCube()


//=====================================================================
// LoadPivotTable
//---------------------------------------------------------------------
// Purpose:	Loads the pivot table
// Params:	None
// Returns:	Nothing
//=====================================================================
function LoadPivotTable()
{
		//Set up data-binding.
		var strPTableConString =	"Provider=MSOLAP;Data Source=";
		//Add cube file specification.
		strPTableConString += m_strCubeFileName;
		
		if(errorFlag)
		{
		    return;
		}
		
		try
		{
				objPTable.ConnectionString = strPTableConString;
				objPTable.DataMember = m_pa;
		}
		catch( e )
		{
				alert( m_strErrorLoadingPTableString + e.description );
				errorFlag = true;
		}
		
		if(errorFlag)
		{
		    return;
		}

		//Set up the basic pivot table display.
		objPTable.displayToolbar = false;
		objPTable.ActiveView.TotalForeColor = "darkslateblue";
		objPTable.ActiveView.TotalBackColor = "ccffff";
		objPTable.ActiveView.MemberForeColor = "darkslateblue";

		//Format the totals.
		objPTable.ActiveView.Totals(m_strCountString).NumberFormat = "##";
		//objPTable.ActiveView.Totals(m_strAvgDurationString).NumberFormat = "##";
		objPTable.ActiveView.Totals(m_strMaxDurationString).NumberFormat = "##";
		//objPTable.ActiveView.Totals(m_strAvgReadsString).NumberFormat = "##";
		objPTable.ActiveView.Totals(m_strMaxReadsString).NumberFormat = "##";

		//FormatTotals();
		SelectView( 1 );
}


//=====================================================================
// SelectView
//---------------------------------------------------------------------
// Purpose:	Configures the report
// Params:	report number
// Returns:	Nothing
//=====================================================================
function SelectView( nRpt )
{
    if(errorFlag)
    {
        return;
    }
		try
		{
				var view = objPTable.ActiveView;
				var c = objPTable.Constants;
				var fsets = objPTable.ActiveView.FieldSets;
		}
		catch( e )
		{
				alert( m_strErrorConfiguringPTableString + e.description );
				return;
		}
	
		if( nRpt == 0 )
				return;
	
		//Reset the current view.
		view.AutoLayout();
	
		switch( nRpt )
		{
				case 1:	//default view:  operator type by period
						//Rows
						view.RowAxis.InsertFieldSet( fsets("["+ m_strPeriodString + "]") );

						//Cols
						view.ColumnAxis.InsertFieldSet( fsets("[" + m_strOperatorTypeString + "]") );
				
						//Display
						view.TitleBar.Caption = m_strPeriodViewString;
				
				
						m_numCurrentView = 1;
						break;
				
				case 2:	//operator type by application across time
						//Rows
						view.RowAxis.InsertFieldSet( fsets("[" + m_strApplicationString + "]") );
				
						//Cols
						view.ColumnAxis.InsertFieldSet( fsets("[" + m_strPeriodString + "]") );
						view.ColumnAxis.InsertFieldSet( fsets("[" + m_strOperatorTypeString + "]") );

						//Display
						view.TitleBar.Caption = m_strApplicationViewString;
				
				
						m_numCurrentView = 2;
						break;

				case 3:	//operator type by user across time
						//Rows
						view.RowAxis.InsertFieldSet( fsets("[" + m_strUserString + "]") );
				
						//Cols
						view.ColumnAxis.InsertFieldSet( fsets("[" + m_strPeriodString + "]") );
						view.ColumnAxis.InsertFieldSet( fsets("[" + m_strOperatorTypeString + "]") );

						//Display
						view.TitleBar.Caption = m_strUserViewString;
				
				
						m_numCurrentView = 3;
						break;
		}

		//Set up totals.
		view.DataAxis.InsertTotal( view.Totals(m_strCountString) );
		//view.DataAxis.InsertTotal( view.Totals(m_strAvgDurationString) );
		view.DataAxis.InsertTotal( view.Totals(m_strMaxDurationString) );
		//view.DataAxis.InsertTotal( view.Totals(m_strAvgReadsString) );
		view.DataAxis.InsertTotal( view.Totals(m_strMaxReadsString) );
		view.TotalOrientation = objPTable.Constants.plTotalOrientationRow;
	
		//Set up misc settings.
		m_strViewFontColor = "lemonchiffon";
		view.ColumnAxis.Fieldsets(0).Fields(0).SubtotalFont.Color = "blue";
		view.Columnaxis.displayEmptyMembers = true;
		view.RowAxis.Fieldsets(0).Fields(0).SubtotalFont.Color = "blue";
		view.RowAxis.displayEmptyMembers = true;
	
		//Select the chart for the default view (not the first time through).
		if( objCSpace.Charts.Count > 0 )
				SelectChart();
				
    ExpandFields();				
    
} //end SelectView()



//=====================================================================
// CreateChart
//---------------------------------------------------------------------
// Purpose:	Creates the chart from the pivot table data
// Params:	None
// Returns:	Nothing
//=====================================================================
function CreateChart()
{
		//Make sure the chart is not visible or painting.
		objCSpace.style.display = "none";
		objCSpace.ScreenUpdating = false;
	
		//Bind the chart to the pivot table.
		try
		{
				objCSpace.DataSource = objPTable;
				objCSpace.ChartDataSources(0).CacheSize = 500;
		}
		catch( e )
		{
				alert( m_strErrorBindingChartString + e.description );
				return;
		}

		if( objCSpace.Charts.Count > 0 )
				objCSpace.Charts.Delete( 0 );
		objCSpace.Charts.Add();

		SelectChart();
		
		//format the chart
		var c = objCSpace.Constants
		var tmpAxis;
		var tmpChart = tmpChart = objCSpace.Charts(0);
		
		//Set up bottom Axis formatting.
		var tmpAxis = tmpChart.Axes( c.chAxisPositionBottom );
		tmpAxis.HasTitle = true;
		tmpAxis.Title.Font.Name = "Tahoma";
		tmpAxis.Title.Font.Size = 8;
		tmpAxis.Title.Font.Bold = true;
		//tmpAxis.NumberFormat = "#,##0";
	
		//Set up left Axis formatting.
		tmpAxis = tmpChart.Axes( c.chAxisPositionLeft );
		tmpAxis.HasTitle = true;
		tmpAxis.Title.Font.Name = "Tahoma";
		tmpAxis.Title.Font.Size = 8;
		tmpAxis.Title.Font.Bold = true;
		tmpAxis.NumberFormat = "#,##0";
	
		//If chart has more than one series, show the legend.
		if( tmpChart.SeriesCollection.Count > 1 )
		{
				tmpChart.HasLegend = true;
				tmpChart.Legend.Position = c.chLegendPositionRight;
		}
} // end CreateChart



//=====================================================================
// SelectChart
//---------------------------------------------------------------------
// Purpose:	Selects the chart for the current view
// Params:	None
// Returns:	Nothing
//=====================================================================
function SelectChart()
{
		var c = objCSpace.Constants;
		var tmpAxis;
		var view = objPTable.ActiveView;
		var tmpChart = objCSpace.Charts(0);
		
		switch( m_numCurrentView )
		{
				case 1:
						//Bind series to the pivot column members.
						tmpChart.SetData( c.chDimSeriesNames, 0, c.chPivotColumns );
								
						//Bind categories to the pivot row members.
						tmpChart.SetData( c.chDimCategories, 0, c.chPivotRows );

						//Set up the chart.
						tmpChart.Type = c.chChartTypeSmoothLine;
						tmpChart.SetData( c.chDimValues, 0, 0 );
				
						//Set Y axis title.
						tmpAxis = tmpChart.Axes( c.chAxisPositionLeft );
						tmpAxis.HasTitle = true;
						tmpAxis.Title.Caption = view.DataAxis.Totals(0).Caption;

						//Set X axis title.
						tmpAxis = tmpChart.Axes(c.chAxisPositionBottom)
						tmpAxis.HasTitle = true
						tmpAxis.Title.Caption = view.RowAxis.FieldSets(0).Caption
						break;
						
				case 2:
						//Bind series to the pivot column members.
						tmpChart.SetData( c.chDimSeriesNames, 0, c.chPivotRows );
								
						//Bind categories to the pivot row members.
						tmpChart.SetData( c.chDimCategories, 0, c.chPivotColumns );

						//Set up the chart.
						tmpChart.Type = c.chChartTypeSmoothLine;
						tmpChart.SetData( c.chDimValues, 0, 0 );
				
						//Set Y axis title.
						tmpAxis = tmpChart.Axes(c.chAxisPositionLeft);
						tmpAxis.HasTitle = true;
						tmpAxis.Title.Caption = view.DataAxis.Totals(0).Caption;

						//Set X axis title.
						tmpAxis = tmpChart.Axes( c.chAxisPositionBottom );
						tmpAxis.HasTitle = true
						tmpAxis.Title.Caption = view.ColumnAxis.FieldSets(0).Caption;
						break;
				
				case 3:
						//Bind series to the pivot column members.
						tmpChart.SetData( c.chDimSeriesNames, 0, c.chPivotRows );
								
						//Bind categories to the pivot row members.
						tmpChart.SetData( c.chDimCategories, 0, c.chPivotColumns );

						//Set up the chart.
						tmpChart.Type = c.chChartTypeSmoothLine;
						tmpChart.SetData( c.chDimValues, 0, 0 );
				
						//Set Y axis title.
						tmpAxis = tmpChart.Axes( c.chAxisPositionLeft );
						tmpAxis.HasTitle = true;
						tmpAxis.Title.Caption = view.DataAxis.Totals(0).Caption;

						//Set X axis title.
						tmpAxis = tmpChart.Axes( c.chAxisPositionBottom );
						tmpAxis.HasTitle = true;
						tmpAxis.Title.Caption = view.ColumnAxis.FieldSets(0).Caption;
		}
} // end SelectChart()



//=====================================================================
// Window events
//---------------------------------------------------------------------
// The code for managing click events.
//=====================================================================
function ShowFieldList()
{
    if(errorFlag)
    {
        return;
    }
		objPTable.displayFieldList = true;
}


function ResetView()
{
		var view = objPTable.ActiveView;
		var fld;

    if(errorFlag)
    {
        return;
    }
			
		try
		{
				fld = view.FieldSets(m_strPeriodString).Fields(0);
				fld.FilterMembers = null;
				fld = view.FieldSets(m_strOperatorTypeString).Fields(0);
				fld.FilterMembers = null;
				fld = view.FieldSets(m_strApplicationString).Fields(0);
				fld.FilterMembers = null;
				fld = view.FieldSets(m_strUserString).Fields(0);
				fld.FilterMembers = null;
		}
		catch( e )
		{
				//These work whether filters are defined or not.
				//alert( e.description ); //debug
		}
		
		objPTable.ActiveView.AutoLayout();
		SelectView( m_numCurrentView );
}


function RefreshData()
{
    if(errorFlag)
    {
        return;
    }

		try
		{
				objPTable.Refresh();
		}
		catch( e )
		{
				alert( m_strErrorRefreshingDataString + e.description );
				return;
		}
}


function ExpandFields()
{
    if(errorFlag)
    {
        return;
    }

		if( document.all.item("chkExpandFields").checked == true )
				objPTable.MemberExpand = objPTable.Constants.plMemberExpandAlways;
		else
				objPTable.MemberExpand = objPTable.Constants.plMemberExpandNever;
}


function ToggleView()
{
    if(errorFlag)
    {
        return;
    }
		//Switch to the chosen view type:
		if( objPTable.style.display != "none" )	//Show the chart.
		{
				//Hide the pivot table.
				objPTable.style.display = "none";
			
				//Display the chart.
				SelectChart();
				objCSpace.ScreenUpdating = true;
				objCSpace.style.display = "inline";
				
				//Update the text.
				tdToggleView.innerText  = m_strDisplayPTableString;
				tdToggleView.title      = m_strDisplayPTableTitleString;
				
				
			
		}
		else //Show the pivot table.
		{
				//Hide the chart.
				objCSpace.style.display = "none";
				objCSpace.ScreenUpdating = false;
			
				//Display the pivot table.
				objPTable.style.display = "inline";
			
				
				//Update the text.
				
		        tdToggleView.innerText  = m_strDisplayChartString;
		        tdToggleView.title      = m_strDisplayChartTitleString;
				
				
		}
}


function ExportData()
{

    if(errorFlag)
    {
        return;
    }

		try
		{
				objPTable.Export( "" , objPTable.Constants.plExportActionOpenInExcel );
		}
		catch( e )
		{
				//alert( m_strErrorExportingDataString + e.description );
				return;
		}
}



-->
</script>

<!-- View selector -->
</html>
